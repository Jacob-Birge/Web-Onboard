@page "/resetpassword"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@using Web_Onboard.Data
@using System.ComponentModel.DataAnnotations

<h3>Password Reset</h3>

@*simple form for entering a new password*@
<div id="frmMain" style="background-color: #eee; height: 100%; width: 100%;">
    <div style="width: 400px; height: 500px; margin: auto; padding-top:60px;">
        <h1 style="color: #555; font-weight: 100; letter-spacing: 4px; vertical-align: top; margin-bottom: -5px;">
            <img src="Images/cp-ma-logo.png" style="height: 40px; margin-bottom: 10px;" alt="CP-MA" />
            Web-Onboard
        </h1>
        <div style="width: 90%; padding: 5%; background-color: #fff; text-align: left;">
            <EditForm Model="@pass" OnValidSubmit="@ValidateUser">
                <DataAnnotationsValidator />
                @if (@errorMessage != "")
                {
                    <div id="errorMessage" class="alert alert-danger">@errorMessage</div>
                }
                <div class="label">New Password</div>
                <InputText placeholder="New Password" @bind-Value=pass.password autocomplete="off" style="margin: 0; width: 100%; padding: 2px 0;" />
                <div class="label">Confirm Password</div>
                <InputText placeholder="Confirm Password" @bind-Value=pass.confirmPass autocomplete="off" style="margin: 0; width: 100%; padding: 2px 0;" />
                <br /><br />
                <input type="submit" value="Reset" class="btn btn-primary" style="margin: 0; width: 100%; padding: 12px 0; font-size: 18px;" />
            </EditForm>
        </div>
    </div>
</div>

@code {
    int minPassLength = 5;
    Pass pass = new Pass();
    string errorMessage = "";

    //save the new password for the current user
    public void ValidateUser()
    {
        try
        {
            if (!String.IsNullOrWhiteSpace(pass.password) && pass.password.Length >= minPassLength)
            {
                if (pass.password == pass.confirmPass)
                {
                    errorMessage = "";
                    int userId = ((CustomAuthenticationStateProvider)authenticationStateProvider).getUserId();
                    Functions.GetDataTableFromSQL($"update [users] set [password]='{pass.password}', [reset_pass]='False' where [id]={userId}");
                    ((CustomAuthenticationStateProvider)authenticationStateProvider).MarkUserAsAuthenticated();
                    navigationManager.NavigateTo("/dashboard");
                }
                else
                {
                    errorMessage = "Passwords must match!";
                }
            }
            else
            {
                errorMessage = "Password must be at least " + minPassLength.ToString() + " characters long.";
            }
        }
        catch { errorMessage = "Issue changing password."; }
        StateHasChanged();
    }

    public class Pass
    {
        [Required]
        public string password { get; set; }
        [Required]
        public string confirmPass { get; set; }
    }
}
