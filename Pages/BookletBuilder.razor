@page "/bookletbuilder"
@using Web_Onboard.Data
@using System.Data
@using PdfSharpCore.Pdf;
@using PdfSharpCore.Pdf.IO;
@using System.ComponentModel.DataAnnotations
@using BlazorInputFile
@attribute [Authorize(Roles = "Owner")]
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime JSRuntime;

<style type="text/css">
    body {
        text-align: left;
    }
    #pnlGlobal {
        width: calc(100% - 42px);
        background-color: #444;
        font-family: "Century Gothic", 'Lato', sans-serif;
        color: #eee;
        padding: 10px 20px;
        margin: 10px 0;
    }
    #lbCompanies {
        padding: 11px 10px;
    }
</style>

<h3>Booklet Builder</h3>
<div ID="upResults">
    <div ID="lblResults" Class="result-box">@(message)</div>

    @if (curRole == 0)
    {
        <div ID="pnlGlobal" Visible="false">
            <div style="font-size: 20px; margin: 0 10px 0 0; padding-top: 10px; float: left;">Change company:</div>
            <select id="lbCompanies" @onchange="@CompanyChanged">
                <option value="-1">Not Selected</option>
                @foreach (DataRow dr in companies_dt.Rows)
                {
                    if (curCompany == (int)dr["id"])
                    {
                        <option value="@(dr["id"].ToString())" selected>@(dr["name"].ToString())</option>
                    }
                    else
                    {
                        <option value="@(dr["id"].ToString())">@(dr["name"].ToString())</option>
                    }
                }
            </select>
            <div style="float: right; color: #888; padding: 25px 0 0 0;">Global Admin Only</div>
        </div>
    }
</div>


@if (curRole == 0)
{
    <div style="margin:auto;text-align:center;">
        <InputFile OnChange="@OnInputFileChange" multiple />
        <button @onclick="SavePage" class="btn btn-primary">Upload Page</button>
    </div>
    <table style="margin: auto">
        <tr>
            <th>File Name</th>
            @if (curRole == 0 && curCompany == -1)
            {
                <th>Company</th>
            }
            <th></th>
        </tr>
        @foreach (Page item in AllPages)
        {
            @if (item != null && (curCompany == -1 || curCompany == item.Company_ID))
            {
                //Users Table
                <tr>
                    <td>@item.Name</td>
                    @if (curRole == 0 && curCompany == -1)
                    {
                        <td>@item.Company_Name</td>
                    }
                    <td><button class="btn btn-dark" @onclick="@(e => AddPage(item.ID))">Add</button></td>
                </tr>
            }
        }
    </table>
    <br />
    <div style="justify-content: center; align-items: center; text-align: center; width:auto; margin:auto;">
        @if (@errorMessage != "")
        {
            <div id="errorMessage" class="alert alert-danger" style="display:inline-block; margin:auto; text-align: center;">@errorMessage</div>
            <br />
            <br />
        }
        @if (@successMessage != "")
        {
            <div id="successMessage" class="alert alert-success" style="display:inline-block; margin: auto; text-align: center;">@successMessage</div>
            <br />
            <br />
        }
    </div>
    @if (booklet.numPages() > 0)
    {
        <div style="justify-content: center; align-items: center; text-align: center; width:auto; margin:auto;">
            <h4 style="display:inline-block;align-content:center; margin-left:auto;"> Employee: </h4>
            <select @bind=booklet.employeeStr style="display: inline-block; margin-right:auto; height: 27px;">
                <option value="-1" selected>Not Assigned</option>
                @foreach (DataRow dr in users_dt.Rows)
                {
                    if (curCompany == -1 || curCompany == (int)dr[2])
                    {
                        <option value="@dr[0].ToString()">@dr[1].ToString()</option>
                    }
                }
            </select>
            <input type="text" placeholder="File Name" @bind=booklet.filename autocomplete="off" style="display: inline; text-align: center; width: 200px; height: 27px; padding: 0px 5px 0px 0px;" />
            <button @onclick="SaveBooklet" class="btn btn-primary">Upload Booklet</button>
            <button @onclick="DownloadBooklet" class="btn btn-primary">Download</button>
            <br /><br />
            <ul ondragover="event.preventDefault();" class="list-group list-group-horizontal justify-content-center" style="margin: auto;">
                @foreach (Page item in booklet.bookletPages)
                {
                    @if (item != null && (curCompany == -1 || curCompany == item.Company_ID))
                    {
                        <li oncontextmenu="return false;" draggable="true" class="list-group-item" style="list-style-type:none;" @key="item.ID" tabindex="1"
                            @ondrop="@(()=> Drop(item))" @ondrag="@(()=> StartDrag(item))" @onmouseup="@((e)=> RemovePage(e, item))">
                            <span>@item.Name</span>
                        </li>
                    }
                }
            </ul>
        </div>
    }
}


@code {
    DataTable dt;
    DataTable companies_dt;
    DataTable users_dt;
    int curCompany = -1;
    int curRole = -1;
    string errorMessage = "";
    string successMessage = "";
    IFileListEntry[] files = null;
    public string message = "Welcome to the booklet builder!";

    List<Page> AllPages;

    Booklet booklet = new Booklet();

    protected override async Task OnInitializedAsync()
    {
        curCompany = ((CustomAuthenticationStateProvider)authenticationStateProvider).getCompanyId();
        curRole = ((CustomAuthenticationStateProvider)authenticationStateProvider).getRoleId();
        if (curRole == 0)
        {
            companies_dt = Functions.GetDataTableFromSQL("SELECT [id], [name] FROM [companies]");
            users_dt = Functions.GetDataTableFromSQL("SELECT [id], [user_name], [company_id] FROM [users] WHERE [role_id]=2 and [active]=1");
        }
        else
        {
            users_dt = Functions.GetDataTableFromSQL("SELECT [id], [user_name], [company_id] FROM [users] WHERE [role_id]=2 and [active]=1 and [company_id]=" + curCompany.ToString());
        }
        updateAllPages();
        booklet = new Booklet();
        StateHasChanged();
    }

    public void updateAllPages()
    {
        if (curRole == 0)
        {
            dt = Functions.GetDataTableFromSQL("SELECT p.[id], p.[company_id], p.[custom_page], p.[name], p.[file], c.[name] FROM [pages] p left join [companies] c on p.company_id=c.id");
        }
        else
        {
            dt = Functions.GetDataTableFromSQL("SELECT [id], [company_id], [custom_page], [name], [file] FROM [pages] WHERE [company_id]=" + curCompany.ToString());
        }
        AllPages = new List<Page>();
        foreach (DataRow dr in dt.Rows)
        {
            if (dr[4] != DBNull.Value)
            {
                string base64str = System.Text.Encoding.ASCII.GetString((byte[])dr[4]);
                byte[] byteArr = Convert.FromBase64String(base64str);
                Stream s = new MemoryStream(byteArr);
                PdfDocument doc = PdfReader.Open(s, PdfDocumentOpenMode.Import);
                int compID = (dr[1] == DBNull.Value) ? -1 : (int)dr[1];
                string compName = "";
                if (curRole == 0 && dr[5] != DBNull.Value)
                    compName = dr[5].ToString();
                AllPages.Add(new Page() { ID = ";" + dr[0].ToString() + ";", Company_ID = compID, Company_Name = compName, Custom = (bool)dr[2], Name = dr[3].ToString(), Doc = doc });
            }
        }
    }

    public void CompanyChanged(ChangeEventArgs e)
    {
        curCompany = Int32.Parse(e.Value.ToString());
        ((CustomAuthenticationStateProvider)authenticationStateProvider).setCompanyId(curCompany);
        StateHasChanged();
    }

    int currentIndex;

    void StartDrag(Page item)
    {
        currentIndex = booklet.getIndex(item);
    }

    void ClickItem(Page item)
    {
        currentIndex = booklet.getIndex(item);
    }

    void Drop(Page item)
    {
        if (item != null)
        {
            var index = booklet.getIndex(item);
            // get current item
            var current = booklet[currentIndex];
            // remove game from current index
            booklet.removeAt(currentIndex);
            booklet.insert(index, current);

            // update current selection
            currentIndex = index;

            StateHasChanged();
        }
    }

    void AddPage(string ID)
    {
        int index = AllPages.FindIndex(a => a.ID == ID);
        if (index != -1)
        {
            int numberOfExistingCopies = booklet.count(ID);
            string newID = ID;
            for (int i = 0; i < numberOfExistingCopies; i++)
            {
                newID += ID.Substring(1);
            }
            booklet.add(AllPages[index].Copy(newID));
            StateHasChanged();
        }
    }

    void RemovePage(MouseEventArgs e, Page item)
    {
        if (e.Button == 2 && item != null)
        {
            int index = booklet.getIndex(item);
            booklet.removeAt(index);
            StateHasChanged();
        }
    }

    void SaveBooklet()
    {
        if (SaveHelper() != -1)
        {
            successMessage = "Successfully uploaded booklet";
        }
    }

    int SaveHelper()
    {
        int insertedId = -1;
        if (String.IsNullOrWhiteSpace(booklet.filename))
        {
            errorMessage = "Must have a file name";
            return insertedId;
        }
        if (booklet.numPages() > 0)
        {
            PdfDocument pdfBooklet = new PdfDocument();
            for (int i = 0; i < booklet.numPages(); i++)
            {
                for (int j = 0; j < booklet[i].Doc.PageCount; j++)
                {
                    pdfBooklet.AddPage(booklet[i].Doc.Pages[j]);
                }
            }
            string command;
            using (MemoryStream ms = new MemoryStream())
            {
                pdfBooklet.Save(ms);
                string fileBase64Data = Convert.ToBase64String(ms.ToArray());
                if (curCompany == -1)
                {
                    command = $"INSERT INTO booklets ([name], [file]) OUTPUT Inserted.ID VALUES('{booklet.filename}', CONVERT(VARBINARY(MAX), '{fileBase64Data}'))";
                }
                else
                {
                    command = $"INSERT INTO booklets ([name], [file], [company_id]) OUTPUT Inserted.ID VALUES('{booklet.filename}', CONVERT(VARBINARY(MAX), '{fileBase64Data}'), {curCompany})";
                }
            }
            DataTable returnDt = Functions.GetDataTableFromSQL(command);
            if (returnDt.Rows.Count > 0)
            {
                insertedId = (int)returnDt.Rows[0][0];
            }
            pdfBooklet.Close();
            int employeeId = int.Parse(booklet.employeeStr);
            if (employeeId != -1)
            {
                Functions.GetDataTableFromSQL($"INSERT INTO userToBooklet ([user_id], [booklet_id]) VALUES({employeeId}, {insertedId})");
            }
            errorMessage = "";
            booklet.reset();
        }
        else
        {
            errorMessage = "Must have a files added to booklet";
            return insertedId;
        }
        return insertedId;
    }

    async void DownloadBooklet()
    {
        int insertedId = SaveHelper();
        if (insertedId != -1)
        {
            await JSRuntime.InvokeAsync<object>("open", $"api/downloadfile?table=0&fileId={insertedId}", "_blank");
        }
    }

    private void OnInputFileChange(IFileListEntry[] fileListEntries)
    {
        files = fileListEntries;
    }

    private async Task SavePage()
    {
        if (files == null)
        {
            return;
        }
        foreach (IFileListEntry file in files)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                await file.Data.CopyToAsync(ms);
                string fileBase64Data = Convert.ToBase64String(ms.ToArray());
                string filename = file.Name.Replace(".pdf", "");
                string command;
                if (curCompany == -1)
                {
                    command = $"INSERT INTO pages (custom_page, [name], [file]) VALUES('{false}', '{filename}', CONVERT(VARBINARY(MAX), '{fileBase64Data}'))";
                }
                else
                {
                    command = $"INSERT INTO pages (company_id, custom_page, [name], [file]) VALUES({curCompany}, '{false}', '{filename}', CONVERT(VARBINARY(MAX), '{fileBase64Data}'))";
                }
                Functions.GetDataTableFromSQL(command);
            }
        }
        successMessage = "Uploaded successfully";
        updateAllPages();
        StateHasChanged();
    }

    public class Booklet
    {
        [Required]
        public string filename { get; set; }
        public string employeeStr { get; set; }
        public List<Page> bookletPages;
        public Booklet()
        {
            bookletPages = new List<Page>();
        }
        public void add(Page page)
        {
            bookletPages.Add(page);
        }
        public void removeAt(int index)
        {
            bookletPages.RemoveAt(index);
        }
        public void insert(int index, Page current)
        {
            bookletPages.Insert(index, current);
        }
        public int count(string ID)
        {
            return bookletPages.Count(a => a.ID.Contains(ID));
        }
        public int numPages()
        {
            return bookletPages.Count;
        }
        public Page this[int index]
        {
            get
            {
                return bookletPages[index];
            }
        }
        public int getIndex(Page item)
        {
            return bookletPages.FindIndex(a => a.ID == item.ID);
        }
        public void reset()
        {
            filename = "";
            employeeStr = "-1";
            bookletPages.Clear();
        }
    }

    public class Page
    {
        public string ID { get; set; }
        public int Company_ID { get; set; }
        public string Company_Name { get; set; }
        public bool Custom { get; set; }
        public string Name { get; set; }
        public PdfDocument Doc { get; set; }
        public override string ToString()
        {
            return Name;
        }
        public Page Copy(string newId = "")
        {
            Page page = new Page() { ID = ID, Company_ID = Company_ID, Company_Name = Company_Name, Custom = Custom, Name = Name, Doc = Doc };
            if (!string.IsNullOrWhiteSpace(newId))
            {
                page.ID = newId;
            }
            return page;
        }
    }
}
