@page "/bookletbuilder"
@using Web_Onboard.Data
@using System.Data
@using PdfSharpCore.Pdf;
@using PdfSharpCore.Pdf.IO;
@attribute [Authorize(Roles = "Owner")]
@inject AuthenticationStateProvider authenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<h3>Booklet Builder</h3>

@if (curRole == 0)
{
    <div style="justify-content:center;align-items:center;text-align:center">
        <h4 style="display:inline-block;align-content:center; margin-left:auto;"> Current Company: </h4>
        <select @onchange="CompanyChanged" style="display: inline-block; margin-right:auto;">
            <option value="-1"></option>
            @foreach (DataRow dr in companies_dt.Rows)
            {
                if (curCompany == (int)dr[0])
                {
                    <option value="@dr[0].ToString()" selected>@dr[1].ToString()</option>
                }
                else
                {
                    <option value="@dr[0].ToString()">@dr[1].ToString()</option>
                }
            }
        </select>
    </div>
}

@if (curRole == 0)
{
    <table style="margin: auto">
        <tr>
            <th>File Name</th>
            @if (curRole == 0)
            {
                <th>Company</th>
            }
            <th></th>
        </tr>
        @foreach (Page item in AllPages)
        {
            @if (item != null && (curCompany == -1 || curCompany == item.Company_ID))
            {
                //Users Table
                <tr>
                    <td>@item.Name</td>
                    @if (curRole == 0)
                    {
                        <td>@item.Company_Name</td>
                    }
                    <td><button class="btn btn-success" @onclick="@(e => AddPage(item.ID))">Add</button></td>
                    @*<button class="btn btn-success" @onclick="UserDelete">Delete</button>*@
                </tr>
            }
        }
    </table>
    @if (BookletPages.Count > 0)
    {
        <div style="justify-content: center; align-items: center; text-align: center; width:auto; margin:auto;">
            <button @onclick="SaveBooklet">Save Booklet</button>
            <ul ondragover="event.preventDefault();" class="list-group list-group-horizontal" style="margin: auto">
                @foreach (Page item in BookletPages)
                {
                    @if (item != null && (curCompany == -1 || curCompany == item.Company_ID))
                    {
                        <li oncontextmenu="return false;" draggable="true" class="list-group-item" style="list-style-type:none;" @key="item.ID" tabindex="1"
                            @ondrop="@(()=> Drop(item))" @ondrag="@(()=> StartDrag(item))" @onmouseup="@((e)=> RemovePage(e, item))">
                            <span>@item.Name</span> <span>@item.Company_ID</span>
                        </li>
                    }
                }
            </ul>
        </div>
    }
}


@code {
    DataTable dt;
    DataTable companies_dt;
    int curCompany = -1;
    int curRole = -1;

    List<Page> AllPages;
    List<Page> BookletPages;

    protected override async Task OnInitializedAsync()
    {
        int? tempComp = await sessionStorage.GetItemAsync<int>("companyId");
        if (tempComp.HasValue)
        {
            curCompany = tempComp.Value;
        }
        int? tempRole = await sessionStorage.GetItemAsync<int>("roleId");
        if (tempRole.HasValue)
        {
            curRole = tempRole.Value;
        }
        if (curRole == 0)
        {
            companies_dt = Functions.GetDataTableFromSQL("SELECT [id], [name] FROM [companies]");
            dt = Functions.GetDataTableFromSQL("SELECT p.[id], p.[company_id], p.[custom_page], p.[name], p.[file], c.[name] FROM [pages] p left join [companies] c on p.company_id=c.id");
        }
        else
        {
            dt = Functions.GetDataTableFromSQL("SELECT [id], [company_id], [custom_page], [name], [file] FROM [pages] WHERE [company_id]=" + curCompany.ToString());
        }
        AllPages = new List<Page>();
        foreach (DataRow dr in dt.Rows)
        {
            if (dr[4] != DBNull.Value)
            {
                string base64str = System.Text.Encoding.ASCII.GetString((byte[])dr[4]);
                byte[] byteArr = Convert.FromBase64String(base64str);
                Stream s = new MemoryStream(byteArr);
                PdfDocument doc = PdfReader.Open(s, PdfDocumentOpenMode.Import);
                int compID = (dr[1] == DBNull.Value) ? -1 : (int)dr[1];
                string compName = "";
                if (curRole == 0 && dr[5] != DBNull.Value)
                    compName = dr[5].ToString();
                AllPages.Add(new Page() { ID = ";" + dr[0].ToString() + ";", Company_ID = compID, Company_Name = compName, Custom = (bool)dr[2], Name = dr[3].ToString(), Doc = doc });
            }
        }
        BookletPages = new List<Page>();
        StateHasChanged();
    }

    public void CompanyChanged(ChangeEventArgs e)
    {
        curCompany = Int32.Parse(e.Value.ToString());
        ((CustomAuthenticationStateProvider)authenticationStateProvider).setCompanyId(curCompany);
        StateHasChanged();
    }

    int currentIndex;

    void StartDrag(Page item)
    {
        currentIndex = GetIndex(item);
    }

    void ClickItem(Page item)
    {
        currentIndex = GetIndex(item);
    }

    int GetIndex(Page item)
    {
        return BookletPages.FindIndex(a => a.ID == item.ID);
    }

    void Drop(Page item)
    {
        if (item != null)
        {
            var index = GetIndex(item);
            // get current item
            var current = BookletPages[currentIndex];
            // remove game from current index
            BookletPages.RemoveAt(currentIndex);
            BookletPages.Insert(index, current);

            // update current selection
            currentIndex = index;

            StateHasChanged();
        }
    }

    void AddPage(string ID)
    {
        int index = AllPages.FindIndex(a => a.ID == ID);
        if (index != -1)
        {
            int numberOfExistingCopies = BookletPages.Count(a => a.ID.Contains(ID));
            string newID = ID;
            for (int i = 0; i < numberOfExistingCopies; i++)
            {
                newID += ID.Substring(1);
            }
            BookletPages.Add(AllPages[index].Copy());
            BookletPages[BookletPages.Count - 1].ID = newID;
            StateHasChanged();
        }
    }

    void RemovePage(MouseEventArgs e, Page item)
    {
        if (e.Button == 2 && item != null)
        {
            int index = GetIndex(item);
            BookletPages.RemoveAt(index);
            StateHasChanged();
        }
    }

    void SaveBooklet()
    {
        if (BookletPages.Count > 0)
        {
            PdfDocument booklet = new PdfDocument();
            for (int i=0; i<BookletPages.Count; i++)
            {
                for (int j = 0; j < BookletPages[i].Doc.PageCount; j++)
                {
                    booklet.AddPage(BookletPages[i].Doc.Pages[j]);
                }
            }
            booklet.Save("booklet.pdf");
        }
    }

    void CopyPages(PdfDocument from, PdfDocument to)
    {
    }

    public class Page
    {
        public string ID { get; set; }
        public int Company_ID { get; set; }
        public string Company_Name { get; set; }
        public bool Custom { get; set; }
        public string Name { get; set; }
        public PdfDocument Doc { get; set; }
        public override string ToString()
        {
            return Name;
        }
        public Page Copy()
        {
            return new Page() { ID = ID, Company_ID = Company_ID, Company_Name = Company_Name, Custom = Custom, Name = Name, Doc = Doc };
        }
    }
}
