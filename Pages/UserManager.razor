@using Web_Onboard.Data
@using System.Data
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@page "/usermanager"
@attribute [Authorize(Roles = "Owner, Manager")]
<h3>User Manager</h3>
@*<div id="frmMain" style="background-color: #eee; height: 100%; width: 100%;">
    <div style="width: 400px; height: 500px; margin: auto;">
        <h1 style="color: #555; font-weight: 100; letter-spacing: 4px; vertical-align: top;">
            <img src="Images/cp-ma-logo.png" style="height: 40px; margin-bottom: -10px;" alt="CP-MA" />
            Web-Onboard
        </h1>*@
        <div style="width: 90%; padding: 5%; background-color: #fff; text-align: left;">
            <EditForm Model="@user" OnValidSubmit="@ValidateUser">
                <DataAnnotationsValidator />
                @if (@errorMessage != "")
                {
                    <div id="errorMessage" class="alert alert-danger">@errorMessage</div>
                }
                <h2>Add User</h2>
                <label for="txtUN" class="label">User Name</label>
                <InputText ID="txtUN" placeholder="User Name" @bind-Value=user.username autocomplete="off" style="margin: 0; width: 100%; padding: 2px 0;" />
                <br />
                <label for="txtUN" class="label">Role ID</label>
                <InputText ID="txtRI" placeholder="Role ID" @bind-Value=user.role_id autocomplete="off" style="margin: 0; width: 100%; padding: 2px 0;" />
                <br />
                <div class="label">Password</div>
                <InputText ID="txtPass" placeholder="Password" @bind-Value=user.password autocomplete="off" style="margin: 0; width: 100%; padding: 2px 0;" />
                <br />
                <table style="width: 100%;">
                </table>
                <br />
                <input type="submit" value="Add" class="btn btn-primary" style="margin: 0; width: 100%; padding: 12px 0; font-size: 18px;" />
  
                @*<label>@roleId</label>*@
                <label>@rowCount</label>
            </EditForm>
          
        </div>


@code {
    private AddUser user = new AddUser();
    private string errorMessage = "";
    private string UserName = "";
    private DataRow roleId ;
    private int rowCount = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        @*if (authState.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/dashboard");
        }*@
    }

    protected async Task<bool> ValidateUser()
    {
        DataTable dt = Functions.GetDataTableFromSQL("SELECT [id], [role_id], [company_id] FROM [users]" );

        if (dt.Rows.Count > 0)
        {
            rowCount = dt.Rows.Count;
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                roleId = dt.Rows[i];
            }
            int userId = (int)(dt.Rows[0][0]);
            @*roleId = (int)(dt.Rows[0][1]);*@
            int companyId = (dt.Rows[0][2] == System.DBNull.Value) ? -1 : (int)dt.Rows[0][2];
            @*((CustomAuthenticationStateProvider)authenticationStateProvider).MarkUserAsAuthenticated(user.username, userId, roleId, companyId);*@

            navigationManager.NavigateTo("/dashboard");

            await sessionStorage.SetItemAsync("username", user.username);
            await sessionStorage.SetItemAsync("userId", userId);
            await sessionStorage.SetItemAsync("roleId", roleId);
            await sessionStorage.SetItemAsync("companyId", companyId);

            //System.Diagnostics.Debug.Print("Hello");
        }
        else
        {
            errorMessage = "Incorrect user name or password";
        }
        return await Task.FromResult(true);
    }
}
