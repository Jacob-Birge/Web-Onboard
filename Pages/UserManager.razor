@page "/usermanager"
@using Web_Onboard.Data
@using System.Data
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@attribute [Authorize(Roles = "Owner, Manager")]
@*This page is designed for Global Admin and Hiring Managers to manage users.
    They are able to add/edit/delete users and give them different role.
    The changes here will directly update the database*@
<style type="text/css">
    body {
        text-align: left;
    }

    #pnlGlobal {
        width: calc(100% - 42px);
        background-color: #444;
        font-family: "Century Gothic", 'Lato', sans-serif;
        color: #eee;
        padding: 10px 20px;
        margin: 10px 0;
    }

    #lbCompanies {
        padding: 11px 10px;
    }
</style>

<h3>User Manager</h3>
<div ID="upResults">
    <div ID="lblResults" Class="result-box">@(message)</div>
    @*If this is global admin, the page display a drop down that filter the user date by their companyID *@
    @if (curRole == 0)
    {
        <div ID="pnlGlobal" Visible="false">
            <div style="font-size: 20px; margin: 0 10px 0 0; padding-top: 10px; float: left;">Change company:</div>
            <select id="lbCompanies" @onchange="@CompanyChanged">
                <option value="-1">Not Selected</option>
                @foreach (DataRow dr in companies_dt.Rows)
                {
                    if (curCompany == (int)dr["id"])
                    {
                        <option value="@(dr["id"].ToString())" selected>@(dr["name"].ToString())</option>
                    }
                    else
                    {
                        <option value="@(dr["id"].ToString())">@(dr["name"].ToString())</option>
                    }
                }
            </select>
            <div style="float: right; color: #888; padding: 25px 0 0 0;">Global Admin Only</div>
        </div>
    }
</div>

<div style="align-content:center;text-align:center;margin:auto;">
    <button class="btn btn-primary" @onclick="UserAddedButtonToggle">Add Users</button>
</div>

<br />
<br />
@*Error Message display*@
@if (errorMessage != "")
{
    <div id="errorMessage" class="alert alert-danger">@errorMessage</div>
}
@*Success Message display*@
@if (successMessage != "")
{
    <div id="successMessage" class="alert alert-success">@successMessage</div>
}
@*When the add button is clicked, it triggers this boolean varible, and display the Add User form*@
@if (addButtonClicked)
{
    <div style="margin: auto; text-align: center;">
        <EditForm Model="@user" Context="addUser">
            <DataAnnotationsValidator />
            <label style="width:100px; text-align:left;">User Name:</label>
            <input type="text" style="width:150px; height:30px;" @bind="user.username">
            <br>
            <label style="width:100px; text-align:left;">Password:</label>
            <input type="text" style="width:150px; height:30px;" @bind="user.password">
            <br>
            <label style="width:100px; text-align:left;">First Name:</label>
            <input type="text" style="width:150px; height:30px;" @bind="user.firstname">
            <br>
            <label style="width:100px; text-align:left;">Last Name:</label>
            <input type="text" style="width:150px; height:30px;" @bind="user.lastname">
            <br>
            <label style="width:100px; text-align:left;">Role ID:</label>
            <select @bind="user.role_id" style="width:150px; height:30px;">
                @*Only Global Admin can set user role to Global Admin*@
                @if (curRole == 0)
                {
                    <option value="0">CPMA Admin</option>
                }
                <option value="1">Hiring Manager</option>
                <option value="2">New Hire</option>
            </select>
            <br>
            <label style="width:100px; text-align:left;">Email:</label>
            <input type="text" style="width:150px; height:30px;" @bind="user.email">
            <br><br>
            <button class="btn btn-success" @onclick="(()=>UserAddedComplete(false))">Add</button>
        </EditForm>
    </div>
}

<div style="width: 100%; text-align: left;">
    @*Display Users Table to Glabal Admin and Hiring Manager*@
    @if (curRole == 0 || curRole == 1)
    {
        <div class="main" style="display: flex; flex-direction: column;">
            @foreach (DataRow dr in (dt.Rows))
            {
                //Check CompamyID Null value, if Null, value is set to -1
                int companyID = (dr["company_id"] == DBNull.Value) ? -1 : (int)dr["company_id"];
                @if ((curCompany == -1 || curCompany == companyID) && curUserId != (int)dr["id"])
                {
                    <div style="display: flex; flex-direction:row; margin: 10px 0 10px 0;">
                        <span style="font-size: 200%; margin-left: 25px; margin-top: 15px; color: #667; width:300px;">@(dr["user_name"].ToString())</span>
                        @if (curRole == 0 && curCompany == -1)
                        {
                            <span style="font-size: 200%; margin-left: 25px; margin-top: 15px; color: #667">@((String.IsNullOrWhiteSpace(dr["name"].ToString())) ? "CPMA" : dr["name"])</span>
                        }
                        <button style="height: 50px; width: 50px; border-radius: 50%; background-color: #667; margin: auto 10px auto auto;" @onclick="(e => UserClicked(dr))">
                            <img src="Images/edit.png" style="height:25px; position: relative; width:25px" />
                        </button>
                    </div>
                    //This displays the detailed information when one user is clicked
                    //They are able to edit/delete user information.

                    @if ((int)userSelected == (int)dr[0])
                    {
                        <div style="display: flex;">
                            <div>
                                <div style="display: flex; flex-direction: column;">
                                    <span>User Name</span>
                                    <input style="width: 200px" @bind="editedName" type="text" />
                                </div>

                                <div style="display: flex; flex-direction: column;">
                                    <span style="margin-right: 20px">Role ID</span>
                                    <select @bind="editedRoleID">
                                        @if (curRole == 0)
                                        {
                                            <option value="0">CPMA Admin</option>
                                        }
                                        <option value="1">Hiring Manager</option>
                                        <option value="2">New Hire</option>
                                    </select>
                                </div>
                                <div style="display: flex; flex-direction: column;">
                                    <span>Email</span>
                                    <input style="width: 200px" type="text" @bind="editedEmail" />
                                </div>
                            </div>
                        </div>
                        <div style="margin-top: 20px; margin-bottom: 30px;">
                            <button class="btn btn-success" @onclick="(()=>UserEdited((int)dr[0],false))">Update</button>
                            <button style="margin-left: 20px" class="btn btn-danger" @onclick="(()=> UserDeleted((int)dr[0],false))">Delete</button>
                        </div>
                    }
                    <hr style="width: 100%; margin-left: auto; margin-right: auto; height: 1px; background-color: #667; opacity: 0.5; " />
                }
            }
        </div>
    }
</div>


@code{
    public AddUser user = new AddUser();
    public string errorMessage = "";
    public string successMessage = "";
    public string message = "Welcome to the user manager!";
    public DataTable dt;
    public DataTable companies_dt;
    public DataTable companies_dt_joined;

    public int curCompany = -1;
    public int curRole = -1;
    public int curUserId = -1;
    public bool addButtonClicked = false;
    //validate if the role id is not 0,1,2
    public int rowcount = 0;
    public int userTobeDeleted = 0;
    public string userTobeDeletedName = "";
    public bool showModal = false;
    public int userSelected = 0;
    public int prevClicked = 0;
    public int companyIDclicked = 0;
    public string editedName = "";
    public string editedEmail = "";
    public int editedRoleID = 999;
    public string roleName = "";
    public bool test = false;

    //This runs at the benginning of the program
    protected override async Task OnInitializedAsync()
    {
        curCompany = ((CustomAuthenticationStateProvider)authenticationStateProvider).getCompanyId();
        curRole = ((CustomAuthenticationStateProvider)authenticationStateProvider).getRoleId();
        curUserId = ((CustomAuthenticationStateProvider)authenticationStateProvider).getUserId();
        //For Global Admin, we want to have all the information from users Table and companies Table
        if (curRole == 0)
        {
            companies_dt = Functions.GetDataTableFromSQL("SELECT [id], [name] FROM [companies]");
            dt = Functions.GetDataTableFromSQL("SELECT u.[id], u.[user_name], u.[role_id], u.[company_id], u.[email], c.[name] FROM [users] u left join [companies] c on u.company_id=c.id where u.[active]=1");
            //curCompany = (curCompany == -1) ? (int)companies_dt.Rows[0][0] : curCompany;
        }
        //For hiring manager and new hires, they are only allow to have the data of their current company
        else
        {

            dt = Functions.GetDataTableFromSQL("SELECT [id], [user_name], [role_id], [company_id], [email] FROM [users] WHERE [active]=1 and [company_id]=" + curCompany.ToString());
        }
    }

    //Check if the add user button is clicked
    public void UserAddedButtonToggle()
    {
        resetMessages();
        addButtonClicked = !addButtonClicked;
    }
    //Action for user insert button
    public int UserAddedComplete(bool testing)
    {
        int insertedId = -1;
        resetMessages();
        if (String.IsNullOrWhiteSpace(user.username))
        {
            errorMessage = "Must have username";
        }
        else if (usernameExists(user.username))
        {
            errorMessage = "Username already taken";
        }
        else if (String.IsNullOrWhiteSpace(user.password))
        {
            errorMessage = "Must have password";
        }
        else
        {
            DataTable tempdt = Functions.GetDataTableFromSQL($"INSERT INTO users(user_name, role_id, password, email, company_id, first_name, last_name) output Inserted.ID VALUES('{user.username}',{user.role_id},'{user.password}','{user.email}',{curCompany},'{user.firstname}','{user.lastname}')");
            if (tempdt.Rows.Count > 0)
            {
                insertedId = (int)tempdt.Rows[0][0];
            }
            if (curRole == 0)
            {
                dt = Functions.GetDataTableFromSQL("SELECT u.[id], u.[user_name], u.[role_id], u.[company_id], u.[email], c.[name] FROM [users] u left join [companies] c on u.company_id=c.id where u.[active]=1");
            }
            else
            {
                dt = Functions.GetDataTableFromSQL("SELECT [id], [user_name], [role_id], [company_id], [email] FROM [users] WHERE [active]=1 and [company_id]=" + curCompany.ToString());
            }
            addButtonClicked = false;
            user.email = "";
            user.password = "";
            user.firstname = "";
            user.lastname = "";
            user.role_id = "2";
            user.username = "";

            //Reload page
            successMessage = "Successfull!";
        }

        if (!testing)
        {
            StateHasChanged();
        }
        return insertedId;
    }
    public void UserClicked(System.Data.DataRow a)
    {
        resetMessages();
        //Determines if the user edit window is already open, if so it will close it
        if ((int)a[0] == prevClicked)
        {
            prevClicked = 0;
            userSelected = 0;
            return;
        }
        prevClicked = (int)a[0];
        userSelected = (int)a[0];
        editedName = a["user_name"].ToString();
        editedEmail = a["email"].ToString();
        editedRoleID = (int)a["role_id"];
        companyIDclicked = (a["company_id"] == DBNull.Value) ? -1 : (int)a["company_id"];

        StateHasChanged();



    }
    public async void CompanyChanged(ChangeEventArgs e)
    {
        resetMessages();
        curCompany = Int32.Parse(e.Value.ToString());
        ((CustomAuthenticationStateProvider)authenticationStateProvider).setCompanyId(curCompany);
        StateHasChanged();
    }
    //When user is finished editing and click "Edit User" button
    public void UserEdited(int UserID,bool testing)
    {
        resetMessages();
        //if they have not added a name, do nothing
        if (string.IsNullOrWhiteSpace(editedName))
        {
            errorMessage = "Must have username";
            return;
        }
        //Update not displaying to the table right away, must reload the page.
        if (usernameExists(editedName, UserID))
        {
            errorMessage = "Username already taken";
            return;
        }
        if (string.IsNullOrWhiteSpace(editedEmail))
        {
            Functions.GetDataTableFromSQL($"UPDATE users SET user_name = '{editedName}',role_id = '{editedRoleID}' WHERE id = '{UserID}'");


        }
        else
        {
            Functions.GetDataTableFromSQL($"UPDATE users SET user_name = '{editedName}',role_id = '{editedRoleID}',email = '{editedEmail}' WHERE id = '{UserID}'");

        }

        if (curRole == 0)
        {
            dt = Functions.GetDataTableFromSQL("SELECT u.[id], u.[user_name], u.[role_id], u.[company_id], u.[email], c.[name] FROM [users] u left join [companies] c on u.company_id=c.id where u.[active]=1");
        }
        else
        {
            dt = Functions.GetDataTableFromSQL("SELECT [id], [user_name], [role_id], [company_id], [email] FROM [users] WHERE [active]=1 and [company_id]=" + curCompany.ToString());
        }

        //resetting data table and values

        editedName = "";
        editedRoleID = 999;
        editedEmail = "";

        userSelected = 0;
        prevClicked = 0;

        if (!testing)
        {
            StateHasChanged();
        }
    }
    public void UserDeleted(int userID, bool testing)
    {
        resetMessages();
        Functions.GetDataTableFromSQL($"update [users] set [active]=0 WHERE [id] = '{userID}'");
       

        int rowIndex = -1;
        for (int i = 0; i < dt.Rows.Count; i++)
        {
            if ((int)dt.Rows[i][0] == userID)
            {
                rowIndex = i;
                break;
            }
        }
        if (rowIndex == -1)
        {
            errorMessage = "Did Not Delete Correctly";
        }
        dt.Rows.RemoveAt(rowIndex);


        editedName = "";
        userSelected = 0;
        showModal = false;

        if (!testing)
        {
            StateHasChanged();
        }
    }
    //Fucntion to check if the username exists in the database
    public bool usernameExists(string username, int UserId = -1)
    {
        DataTable testDt;
        if (UserId == -1)
        {
            testDt = Functions.GetDataTableFromSQL($"select [user_name] from [users] where [user_name]='{username}'");
        }
        else
        {
            testDt = Functions.GetDataTableFromSQL($"select [user_name] from [users] where [user_name]='{username}' and [id]!={UserId}");
        }
        return (testDt.Rows.Count > 0);
    }

    private void resetMessages()
    {
        errorMessage = "";
        successMessage = "";
    }
    //Data model.
    public class AddUser
    {
        [Required]
        public string username { get; set; }
        [Required]
        public string password { get; set; }
        public string firstname { get; set; }
        public string lastname { get; set; }
        public string role_id { get; set; }
        public string email { get; set; }

        public AddUser()
        {
            username = "";
            password = "";
            firstname = "";
            lastname = "";
            role_id = "2";
            email = "";
        }
    }
}
