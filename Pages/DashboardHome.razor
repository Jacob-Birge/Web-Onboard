@page "/dashboard"
@attribute [Authorize]
@using Web_Onboard.Data
@using System.Data
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime JSRuntime;
@*show message while authorizing the user*@
<AuthorizeView>
    <Authorizing>
        <p>Authorizing</p>
    </Authorizing>
</AuthorizeView>
@*show cpma admin a welcome message*@
<AuthorizeView Roles="Owner">
    <Authorized>
        <h3>Dashboard</h3>
        <h1 style="text-align:center;">Hello@(String.IsNullOrWhiteSpace(firstname) ? "" : ", " + firstname)</h1>
    </Authorized>
</AuthorizeView>
@*show hiring manager a welcome message*@
<AuthorizeView Roles="Manager">
    <Authorized>
        <h3>Dashboard</h3>
        <h1 style="text-align:center;">Hello@(String.IsNullOrWhiteSpace(firstname) ? "" : ", " + firstname)</h1>
    </Authorized>
</AuthorizeView>
@*show new hire a welcome message allow them to download any booklets assign to them*@
<AuthorizeView Roles="BaseUser">
    <Authorized>
        <div style="text-align:center;">
            @if (String.IsNullOrWhiteSpace(firstname))
            {
                <h1>Welcome Aboard!</h1>
            }
            else
            {
                <h1>Welcome Aboard, @firstname!</h1>
            }
            <br />
            @if (dt.Rows.Count > 0)
            {
                @if (dt.Rows.Count == 1)
                {
                    <h3>Download your booklet</h3>
                }
                else
                {
                    <h3>Download your booklets</h3>
                }
                foreach (DataRow dr in dt.Rows)
                {
                    <button @onclick="() => DownloadBooklet((int)dr[0])">@dr[1].ToString()</button>
                }
            }
            else
            {
                <h3>You do not currently have a booklet assigned to you.</h3>
            }
        </div>
    </Authorized>
</AuthorizeView>
@*allow unit tester to run unit tests and display their results*@
<AuthorizeView Roles="UnitTester">
    <Authorized>
        <div style="text-align:center;">
            <h1>Run unit tests</h1>
            <br />
            <button @onclick="ConductTests">Run</button>
            <br />
            @if (testOutputs.Count > 0)
            {
                <h3>Outputs from tests:</h3>
                foreach (string s in testOutputs)
                {
                    @s
                    <br />
                }
            }
            else
            {
                <h3>No tests have been ran.</h3>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code{
    private string firstname = "";
    private int curRole = -1;
    private int curUserId = -1;
    DataTable dt = new DataTable();
    private List<string> testOutputs = new List<string>();

    //initilizes data on page load
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/login");
        }
        curRole = ((CustomAuthenticationStateProvider)authenticationStateProvider).getRoleId();
        firstname = ((CustomAuthenticationStateProvider)authenticationStateProvider).getFirstName();
        curUserId = ((CustomAuthenticationStateProvider)authenticationStateProvider).getUserId();
        if (curRole == 2)
        {
            dt = Functions.GetDataTableFromSQL($"select b.[id], b.[name] from [booklets] b join [userToBooklet] ub on b.[id]=ub.[booklet_id] join [users] u on ub.[user_id]=u.[id] where u.[id]={curUserId}");
        }
    }

    //call api to download 
    async void DownloadBooklet(int id)
    {
        try
        {
            await JSRuntime.InvokeAsync<object>("open", $"api/downloadfile?table=0&fileId={id}", "_blank");
        }
        catch { }
    }

    void ConductTests()
    {
        UnitTests test = new UnitTests();
        testOutputs = test.outputs;
        StateHasChanged();
    }
}