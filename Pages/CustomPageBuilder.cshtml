@page "/custompagebuilder"
@namespace Web_Onboard.Shared
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model Web_Onboard.Pages.CustomPageBuilderModel
@{
    ViewData["Title"] = "Custom Page Builder";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Web-Onboard</title>
    <base href="/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link rel="icon" href="favicon.png" />

    <script src="https://cdn.quilljs.com/1.1.3/quill.js"></script>
    <script src="https://cdn.quilljs.com/1.1.3/quill.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.js"></script>

    <link href="https://cdn.quilljs.com/1.1.3/quill.snow.css" rel="stylesheet" />
    <link href="https://cdn.quilljs.com/1.1.3/quill.bubble.css" rel="stylesheet" />

    <style type="text/css">
        .error {
            border: 2px solid red;
        }
        body {
            text-align: left;
        }
        #pnlGlobal {
            width: calc(100% - 42px);
            background-color: #444;
            font-family: "Century Gothic", 'Lato', sans-serif;
            color: #eee;
            padding: 10px 20px;
            margin: 10px 0;
        }

        #lbCompanies {
            padding: 11px 10px;
        }
    </style>
</head>
<body>
    <app>
        <div class="sidebar">
            <component type="typeof(NavMenuViewCaller)" render-mode="Server" />
        </div>

        <div class="main">
            <div class="top-row px-4">
                <div style="float:right; margin-top: .5rem; margin-bottom: 1rem;">
                    <span>@Model.name</span>
                    <button class="btn btn-primary" onclick="location.href = '/editprofile';">Edit Profile</button>
                    <button class="btn btn-dark" onclick="location.href = '/logout';">Logout</button>
                </div>
            </div>
            <div class="content px-4">
                <h3>Custom Page Builder</h3>
                <div ID="upResults">
                    <div ID="lblResults" Class="result-box">@(Model.message)</div>
                    @if (Model.roleId == 0)
                    {
                <div ID="pnlGlobal" Visible="false">
                    <div style="font-size: 20px; margin: 0 10px 0 0; padding-top: 10px; float: left;">Change company:</div>
                    @Html.DropDownList("companySelection", Model.companyListItems, new { @id="lbCompanies", @onchange = "changeCompany(this.value)", @style = "display:inline-block; margin:auto;" })
                    <div style="float: right; color: #888; padding: 25px 0 0 0;">Global Admin Only</div>
                </div>
                    }
                </div>

                <div id="errorMessage" class="alert alert-danger" style="display:none">
                    Failed to upload file.<br />
                    Please contact system administrator.
                </div>
                <div id="filenameMessage" class="alert alert-warning" style="display:none">
                    Must enter a file name.
                </div>
                <div id="uploadingMessage" class="alert alert-info" style="display:none">
                    Uploading...
                </div>
                <div id="successMessage" class="alert alert-success" style="display:none">
                    Successfully uploaded file.
                </div>

                <div style="text-align:center;margin:auto;">
                    <input type="text" class="form-control" id="filename" placeholder="File Name" style="display:inline; text-align:center; width: 25%; padding:0px 5px 0px 0px;">
                    <button class="btn btn-primary" onclick="genPDF();"> Save </button>
                </div>
                <br />
                <div style="width: 8.3in;margin: auto;padding-bottom:20px;">
                    <div id="display"></div>
                    <div id="toolbar"></div>
                    <div id="editor" style="height: 11.685in; width: 8.3in;margin: auto;"></div>
                </div>
            </div>
        </div>
    </app>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
        var toolbarOptions = [
            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
            ['blockquote'],

            [{ 'list': 'ordered' }, { 'list': 'bullet' }],
            [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
            [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
            [{ 'direction': 'rtl' }],                         // text direction

            ['link', 'image', 'formula'],

            [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

            //undo and redo:
            ['undo', 'redo'],

            [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
            [{ 'font': [] }],
            [{ 'align': [] }],

            ['clean']                                         // remove formatting button
        ];
        var quill = new Quill('#editor', {
            modules: {
                toolbar: toolbarOptions,
                history: {
                    delay: 2000,
                    maxStack: 500,
                    userOnly: true
                }
            },
            theme: 'snow'
        });
        var undoButton = document.querySelector('.ql-undo');
        undoButton.addEventListener('click', function () {
            quill.history.undo();
        });
        var redoButton = document.querySelector('.ql-redo');
        redoButton.addEventListener('click', function () {
            quill.history.redo();
        });

        var companyIdStr = @Html.DisplayFor(model => model.companyId);
        var messageIds = ["errorMessage", "filenameMessage", "uploadingMessage", "successMessage"]

        function changeCompany(val) {
            var pathname = window.location.pathname;
            var handler = "?handler=CompanyChange";
            var actionpath = pathname + handler;
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {

                }
            };
            xhttp.open("GET", actionpath + "&compId=" + val, true);
            xhttp.send();
            companyIdStr = val;
        }

        function showMessage(elementId) {
            messageIds.forEach(function (item, index) {
                showMessageHelper(item, elementId);
            });
        }

        function showMessageHelper(item, elementId) {
            if (elementId == item) {
                document.getElementById(item).style.display = "block";
            }
            else {
                document.getElementById(item).style.display = "none";
            }
        }

        function requestHelper(html, filename) {
            var sendLimit = 1500;
            var xhttp = new XMLHttpRequest();
            var done = false;
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (!done) {
                        requestHelper(html.substring(sendLimit), filename);
                    }
                    else {
                        showMessage("successMessage");
                        quill.setContents([{ insert: '\n' }]);
                        document.getElementById("filename").value = "";
                    }
                }
            };
            var portionToSend;
            if (html.length > sendLimit) {
                portionToSend = html.substring(0, sendLimit);
                portionToSend = encodeURIComponent(portionToSend);
                xhttp.open("GET", "api/buildhtml?html=" + portionToSend, true);
                xhttp.send();
            }
            else {
                done = true;
                portionToSend = html;
                portionToSend = encodeURIComponent(portionToSend);
                xhttp.open("GET", "api/savecustom?html=" + portionToSend + "&filename=" + filename.toString() + "&companyid=" + companyIdStr, true);
                xhttp.send();
            }
        }

        function genPDF() {
            var filename = document.getElementById("filename").value;
            filename = filename.replace(".pdf", "");
            if (filename == "") {
                document.getElementById("filename").className = document.getElementById("filename").className + " error";
                showMessage("filenameMessage");
            }
            else {
                document.getElementById("filename").className = document.getElementById("filename").className.replace(" error", "");
                showMessage("uploadingMessage");
                try {
                    const page = document.getElementById("editor");
                    var html = page.getElementsByClassName("ql-editor")[0].innerHTML;
                    requestHelper(html, filename);
                }
                catch{
                    showMessage("errorMessage")
                }
            }
        }
    </script>
</body>
</html>