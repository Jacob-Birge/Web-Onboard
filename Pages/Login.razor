@page "/login"
@layout LoginLayout
@using Web_Onboard.Data
@using System.Data
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<h3>Login</h3>

@*form for logging into the website*@
<div id="frmMain" style="background-color: #eee; height: 100%; width: 100%;">
    <div style="width: 400px; height: 500px; margin: auto; padding-top:60px;">
        <h1 style="color: #555; font-weight: 100; letter-spacing: 4px; vertical-align: top; margin-bottom: -5px;">
            <img src="Images/cp-ma-logo.png" style="height: 40px; margin-bottom: 10px;" alt="CP-MA" />
            Web-Onboard
        </h1>
        <div style="width: 90%; padding: 5%; background-color: #fff; text-align: left;">
            <EditForm Model="@user" OnValidSubmit="@(()=>ValidateUser(false))">
                <DataAnnotationsValidator />
                @if (@errorMessage != "")
                {
                    <div id="errorMessage" class="alert alert-danger">@errorMessage</div>
                }
                <label for="txtUN" class="label">User Name</label>
                <InputText ID="txtUN" placeholder="User Name" @bind-Value=user.username autocomplete="off" style="margin: 0; width: 100%; padding: 2px 0;" />
                <br />
                <div class="label">Password</div>
                <InputText ID="txtPass" placeholder="Password" @bind-Value=user.password autocomplete="off" style="margin: 0; width: 100%; padding: 2px 0;" />
                <br />
                <table style="width: 100%;">
                    <tr>
                        <td style="text-align: left;">
                            <InputCheckbox type="checkbox" id="addition" name="rememberMe" @bind-Value=user.remember />
                            Remember Me
                        </td>
                        @if (false)
                        {
                            <td style="text-align: right;">
                                <a href="?">Forgot password?</a>
                            </td>
                        }
                    </tr>
                </table>
                <br />
                <input type="submit" value="Login" class="btn btn-primary" style="margin: 0; width: 100%; padding: 12px 0; font-size: 18px;" />
            </EditForm>
        </div>
    </div>
</div>

@code {
    public User user = new User();
    private string errorMessage = "";

    //initialize data on page load
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/dashboard");
        }
    }

    //validate the inputted username and password
    public async Task<bool> ValidateUser(bool testing)
    {
        DataTable dt = Functions.GetDataTableFromSQL("SELECT [id], [role_id], [company_id], [user_name], [password], [reset_pass], [first_name], [last_name], [email] FROM [users] WHERE [user_name] = '" + user.username + "' AND [password] = '" + user.password + "'");

        if (dt.Rows.Count > 0)
        {
            string username = (string)(dt.Rows[0][3]);
            string pass = (string)(dt.Rows[0][4]);
            if (username.Equals(user.username) && pass.Equals(user.password))
            {
                int userId = (int)(dt.Rows[0][0]);
                int roleId = (int)(dt.Rows[0][1]);
                int companyId = (dt.Rows[0][2] == System.DBNull.Value) ? -1 : (int)dt.Rows[0][2];
                if ((bool)dt.Rows[0][5])
                {
                    if (testing)
                    {
                        return await Task.FromResult(true);
                    }
                    else
                    {
                        ((CustomAuthenticationStateProvider)authenticationStateProvider).HoldForReset((string)(dt.Rows[0][3]), userId, roleId, companyId, dt.Rows[0][6].ToString(), dt.Rows[0][7].ToString(), dt.Rows[0][8].ToString());
                        navigationManager.NavigateTo("/resetpassword");
                    }
                }
                else
                {
                    if (testing)
                    {
                        return await Task.FromResult(true);
                    }
                    else
                    {
                        ((CustomAuthenticationStateProvider)authenticationStateProvider).MarkUserAsAuthenticated(user.username, userId, roleId, companyId, dt.Rows[0][6].ToString(), dt.Rows[0][7].ToString(), dt.Rows[0][8].ToString());
                        navigationManager.NavigateTo("/dashboard");
                    }
                }
            }
            else
            {
                if (testing)
                {
                    return await Task.FromResult(false);
                }
                else
                {
                    errorMessage = "Incorrect user name or password";
                }
            }
        }
        else
        {
            if (testing)
            {
                return await Task.FromResult(false);
            }
            else
            {
                errorMessage = "Incorrect user name or password";
            }
        }
        return await Task.FromResult(true);
    }

    //class for holding the information used in the form
    public class User
    {
        [Required]
        public string username { get; set; }
        [Required]
        public string password { get; set; }
        public bool remember { get; set; }
        public User()
        {
            remember = true;
        }
    }
}
